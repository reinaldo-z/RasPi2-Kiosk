{
  "name": "RasPi2-kiosk",
  "tagline": "Guide for setting up a RasPi 2 to work as a lightweight kiosk with Arch Linux.",
  "body": "Installing a lightweight kiosk on a RasPi 2 with Arch Linux\r\n==================================================\r\n\r\nArch Linux is both lightweight and highly customizable, and is the perfect\r\ndistro for creating a kiosk using the low-powered RasPi 2. Full details about\r\nArch Linux on the RasPi 2 can be found on the [Official Arch Linux ARM wiki]\r\n(https://archlinuxarm.org/platforms/armv7/broadcom/raspberry-pi-2).\r\n\r\n\r\nGetting started\r\n--------------------------------------------------\r\n\r\nFor this guide we will use the pre-made Arch Linux RasPi 2\r\n[image](https://sourceforge.net/projects/archlinux-rpi2/). You can copy the\r\nimage to your microSD card using any of the [standard methods]\r\n(https://www.raspberrypi.org/documentation/installation/installing-images/README.md)\r\navailable for your OS.\r\n\r\nAfter booting into the RasPi 2, we are presented with a virtual console. We\r\nlogin to the superuser:\r\n\r\n```\r\nuser: root\r\npass: root\r\n```\r\n\r\nNow's a good time to change the root password to something very secure.\r\n\r\nWe should first expand the root filesystem to the full size of the microSD card.\r\nAny partitioning utility will work for this purpose; I will use `fdisk` here. We\r\nrun \r\n\r\n```sh\r\nfdisk /dev/mmcblk0\r\n```\r\n\r\nto open the utility acting on our microSD card. We need to delete the root\r\npartition and then recreate it with the desired size. There are [many]\r\n(http://elinux.org/RPi_Resize_Flash_Partitions#Manually_resizing_the_SD_card_on_Raspberry_Pi)\r\n[tutorials]\r\n(https://raspberry-hosting.com/en/faq/how-expand-arch-linux-root-partition)\r\navailable for this procedure. I suggest creating a primary partition, but an\r\nextended partition is also perfectly fine. This is also a good time to make a\r\nswap partition but for this application I do not consider it necessary.\r\n\r\nAfter creating the new partition over the full card size, you need to restart\r\nthe computer by issuing the `reboot` command. After you are logged into root\r\nagain, expand the partition to fill the newly assigned space by running\r\n\r\n```sh\r\nresize2fs /dev/mmcblk0p2\r\n```\r\n\r\nwhich assumes that your new root partition is located at `/dev/mmcblk0p2`.\r\n\r\n\r\nBasic system configuration\r\n--------------------------------------------------\r\n\r\nNow that we have the bare-bones system in place, we can configure it and install\r\nthe necessary software. First, we should configure some basic system aspects. In\r\nthis example, I'll call the new system `oracle`:\r\n\r\n```sh\r\nloadkeys us # loads US keyboard keymap\r\nsed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen\r\nlocale-gen # generates en_US.UTF-8 locale\r\nln -sf /usr/share/zoneinfo/America/Mexico_City /etc/localtime # sets time zone\r\necho LANG=en_US.UTF-8 > /etc/locale.conf # sets en_US.UTF-8 as default locale\r\necho KEYMAP=us > /etc/vconsole.conf # sets US keymap as default\r\necho oracle > /etc/hostname # changes the hostname of the machine\r\n```\r\n\r\nNext, we should create a user with standard privileges. In this example, we\r\ncreate an account for `pi`, with password `raspberry`,\r\n\r\n```sh\r\nuseradd -m -g users -s /bin/bash -d /home/pi pi\r\necho \"pi:raspberry\" | chpasswd\r\n```\r\n\r\n### RasPi specific options\r\n\r\nLastly, we configure a few RasPi specific options. See the\r\n[official documentation]\r\n(https://www.raspberrypi.org/documentation/configuration/config-txt.md) \r\nfor full details on editing the `config.txt` file. We run\r\n\r\n```sh\r\nsed -i 's/#disable_overscan=1/disable_overscan=1/g' /boot/config.txt\r\nsed -i 's/gpu_mem=64/gpu_mem=128/g' /boot/config.txt\r\n```\r\n\r\nThis disables overscanning so that the display image goes edge-to-edge. It also\r\nincrease the GPU memory from 64 MB to 128 MB.\r\n\r\nIt may be desirable to rotate the screen so that it is in portrait mode, useful\r\nfor displaying a long page without scrolling. This can be accomplished by\r\nediting the `/boot/config.txt` file and changing `display_rotate=0` to\r\n`display_rotate=1` or `display_rotate=3` depending on the orientation of your\r\nmonitor. It may also be necessary to increase the GPU memory from 128 MB to 256\r\nMB. \r\n\r\nThis is a convenient point to restart the machine again by issuing the `reboot`\r\ncommand. Everything we have set up so far will take effect after restarting. \r\n\r\n\r\nSetting up the kiosk\r\n--------------------------------------------------\r\n\r\nWe now have a fully configured RasPi, and we are ready to install the necessary\r\npackages for the kiosk. To do this, I have selected some lightweight\r\napplications:\r\n\r\n* `xorg`, the standard GUI display server and utilities,\r\n* `matchbox-window-manager`, an ultra-lightweight WM with limited interface,\r\n* `midori`, a lightweight web browser with a CLI, and\r\n* `xterm`, a basic and lightweight terminal emulator.\r\n\r\nLog in as `root` once again. The following commands will install these packages;\r\nmake sure you have a good internet connection.\r\n\r\n```sh\r\npacman -Syu --noconfirm # system updates, may take a little while\r\npacman -S htop vim wget --noconfirm # useful utils\r\npacman -S xorg-server xorg-server-utils xorg-xinit --noconfirm # basic X11 packages\r\npacman -S alsa-utils xf86-video-fbturbo --noconfirm # RasPi 2 sound and video drivers\r\npacman -S matchbox-window-manager --noconfirm # super lightweight WM\r\npacman -S midori unclutter xterm --noconfirm # unclutter hides your cursor\r\npacman -S ttf-dejavu --noconfirm # set of nice fonts\r\n```\r\n\r\nThese packages only weigh in at only a few hundred MB, and are very low on\r\nresource consumption. Installing them should only take a few minutes. Now that\r\nour system is fully installed we need to set it up to run as an automated kiosk.\r\n\r\n\r\n### Auto-login to unprivileged user\r\n\r\nWe want the system to automatically log in as the unprivileged user. We simply\r\nfollow the [documentation]\r\n(https://wiki.archlinux.org/index.php/automatic_login_to_virtual_console), \r\nwhich can be summed up as\r\n\r\n```sh\r\n$ cat /etc/systemd/system/getty@tty1.service.d/override.conf\r\n\r\n[Service]\r\nExecStart=\r\nExecStart=-/usr/bin/agetty --autologin pi --noclear %I $TERM\r\n```\r\n\r\nYou can restart the machine to test this out. It should log in directly to the\r\n`pi` user.\r\n\r\n### Autostarting X at login\r\n\r\nThere are several ways autostart the WM at login. Refer to the [documentation]\r\n(https://wiki.archlinux.org/index.php/Xinitrc#Autostart_X_at_login) for more\r\ndetails on accomplishing this. I opted for a simple script that will execute\r\nfrom the `.bash_profile` of the user when logged in. This approach does not\r\nrequire the superuser and is very flexible.\r\n\r\nWe first create a shell script in our home directory. I call it `startkiosk.sh`\r\nhere, but you can use whatever you want. The script contains the following:\r\n\r\n```sh\r\n$ cat ~/startkiosk.sh\r\n\r\n#!/bin/sh\r\nxset -dpms      # disable DPMS (Energy Star) features.\r\nxset s off      # disable screen saver\r\nxset s noblank  # don't blank the video device\r\nunclutter &     # hides your cursor after inactivity\r\nmatchbox-window-manager & # starts the WM\r\nxterm &         # launches a helpful terminal\r\nmidori -e Fullscreen -a https://www.raspberrypi.org # opens midori fullscreen\r\n```\r\n\r\nI also include the script in this repo that you can copy directly to your home\r\ndirectory. It does not need to be executable. You should try the script out with\r\n\r\n```sh\r\nxinit ./startkiosk.sh\r\n```\r\n\r\nThis should open up a fullscreen terminal window and then a fullscreen instance\r\nof Midori, loading the website of your choice. You can `alt + tab` into the\r\nterminal at any moment to install a program, modify the scripts, or even restart\r\nor shutdown the machine. The way the script is organized causes the terminal\r\nwindow to end up behind Midori, so you can boot into the machine knowing that it\r\nwill display the correct thing without any interaction from your part. When you\r\nare done with the test, you can kill the X session with\r\n\r\n```sh\r\npkill -15 Xorg\r\n```\r\n\r\nThis will dump you back at the command line. So, now all we have to do is to run\r\nthe script at login time. The easiest way of doing this can also be found in the\r\n[documentation]\r\n(https://wiki.archlinux.org/index.php/Xinitrc#Autostart_X_at_login). We'll \r\nsimply add a line to the end of your .bash_profile that tells the system to run\r\nthe appropriate command. We can do this with a nice one liner like\r\n\r\n```\r\nprintf '[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && xinit ./startkiosk.sh\\n' >> .bash_profile\r\n```\r\n\r\nRestart one last time and your RasPi should boot directly into your fullscreen\r\nbrowser!\r\n\r\n\r\nConclusions\r\n--------------------------------------------------\r\n\r\n### Achievements: \r\n* Using a RasPi 2 is a cost-effective way to create a simple kiosk machine\r\n  capable of displaying a website. \r\n* Simple script approach does not require superuser access nor changing any\r\n  system files. If you don't want to use it anymore you can simple comment one\r\n  line in the .bash_profile.\r\n* WM and web browser are super lightweight and will not tax your RasPi, unless\r\n  you purposely load some heavy web-content. Memory usage is around 125 MB with\r\n  a simple website loaded.\r\n* You can simple plug your RasPi in and everything will load automatically. No\r\n  user input, keyboard, or mouse needed.\r\n\r\n### Deficiencies:\r\n* The RasPi will never sleep or shut off the display. The settings should be\r\n  tweaked so that it turns on and shuts off the display at certain hours.\r\n* As is, it only displays one website. It would be nice to have several open\r\n  that can be cycled through automatically.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}